{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["let username: string = \"Imran\";\nconst age: number = 12;\nconst isOld: boolean = false;\n\n// Type\ntype UserDetails = {\n  name: string,\n  age: number\n}\n\n// Interface\ninterface UserDetail {\n  name: string,\n  age: number\n}\n\n// Object with Type\nconst user : UserDetails = {\n  name: username,\n  age\n}\n\n// Object with Interface\nconst user2 : UserDetail = {\n  name: username,\n  age\n}\n\n// Arrow Function\nconst checkAge = (num: number): string => {\n  if (num === age) {\n    return \"Correct age\"\n  }\n  return \"Wrong age\"\n}\n\n// Normal Function\nfunction checkAg(num: number): string {\n  if (num === age) {\n    return \"Correct age\"\n  }\n  return \"Wrong age\"\n}\n\n// Lists\n// or == |\nconst friends: string[] = [\"Imran\", \"Ashim\"]\nconst luckyNumber: number[] = [10, 7]\nconst bool: boolean[] = [true, false] // Not useful\n\n// Combine two types in a list\nconst friendsAndNumbers: (string | number)[] = [\"Imran\", 10, \"Ashim\"]\n\n// Combine Type and number\nconst lotteryWinner : (number | UserDetails)[] = [{\n  name: \"Awonke\",\n  age: 18\n}, 13]\n\n// Lists of Interface or Types\nconst users : UserDetail[] = [{\n  name: \"\",\n  age: 0\n}, {name: \"\", age: 2}]\n\nconsole.log(users)"],
  "mappings": ";AAAA,IAAI,WAAmB;AACvB,MAAM,MAAc;AACpB,MAAM,QAAiB;AAevB,MAAM,OAAqB;AAAA,EACzB,MAAM;AAAA,EACN;AACF;AAGA,MAAM,QAAqB;AAAA,EACzB,MAAM;AAAA,EACN;AACF;AAGA,MAAM,WAAW,CAAC,QAAwB;AACxC,MAAI,QAAQ,KAAK;AACf,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAGA,SAAS,QAAQ,KAAqB;AACpC,MAAI,QAAQ,KAAK;AACf,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAIA,MAAM,UAAoB,CAAC,SAAS,OAAO;AAC3C,MAAM,cAAwB,CAAC,IAAI,CAAC;AACpC,MAAM,OAAkB,CAAC,MAAM,KAAK;AAGpC,MAAM,oBAAyC,CAAC,SAAS,IAAI,OAAO;AAGpE,MAAM,gBAA2C,CAAC;AAAA,EAChD,MAAM;AAAA,EACN,KAAK;AACP,GAAG,EAAE;AAGL,MAAM,QAAuB,CAAC;AAAA,EAC5B,MAAM;AAAA,EACN,KAAK;AACP,GAAG,EAAC,MAAM,IAAI,KAAK,EAAC,CAAC;AAErB,QAAQ,IAAI,KAAK;",
  "names": []
}
